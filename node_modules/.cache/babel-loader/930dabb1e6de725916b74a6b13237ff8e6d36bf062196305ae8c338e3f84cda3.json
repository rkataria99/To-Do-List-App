{"ast":null,"code":"// src/components/features/tasksSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Initial state for tasks\nconst initialState = [];\n\n// Create a slice for tasks\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    // Action to add a task\n    addTask: (state, action) => {\n      state.push(action.payload);\n    },\n    // Action to update a task's status\n    updateTask: (state, action) => {\n      const {\n        id,\n        status\n      } = action.payload;\n      const task = state.find(task => task.id === id);\n      if (task) {\n        task.completed = status;\n      }\n    },\n    // Action to fetch and set tasks\n    fetchTasks: (state, action) => {\n      return action.payload; // This will replace the current state with the fetched tasks\n    }\n  }\n});\nexport const {\n  addTask,\n  updateTask,\n  fetchTasks\n} = tasksSlice.actions;\n\n// Default export of the reducer to be used in the store\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasksSlice","name","reducers","addTask","state","action","push","payload","updateTask","id","status","task","find","completed","fetchTasks","actions","reducer"],"sources":["D:/Bytive_ToDoList/ToDoListApp/src/components/features/tasksSlice.js"],"sourcesContent":["// src/components/features/tasksSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Initial state for tasks\r\nconst initialState = [];\r\n\r\n// Create a slice for tasks\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    // Action to add a task\r\n    addTask: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    // Action to update a task's status\r\n    updateTask: (state, action) => {\r\n      const { id, status } = action.payload;\r\n      const task = state.find((task) => task.id === id);\r\n      if (task) {\r\n        task.completed = status;\r\n      }\r\n    },\r\n    // Action to fetch and set tasks\r\n    fetchTasks: (state, action) => {\r\n      return action.payload; // This will replace the current state with the fetched tasks\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTask, updateTask, fetchTasks } = tasksSlice.actions;\r\n\r\n// Default export of the reducer to be used in the store\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG,EAAE;;AAEvB;AACA,MAAMC,UAAU,GAAGF,WAAW,CAAC;EAC7BG,IAAI,EAAE,OAAO;EACbF,YAAY;EACZG,QAAQ,EAAE;IACR;IACAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC5B,CAAC;IACD;IACAC,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEI,EAAE;QAAEC;MAAO,CAAC,GAAGL,MAAM,CAACE,OAAO;MACrC,MAAMI,IAAI,GAAGP,KAAK,CAACQ,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;MACjD,IAAIE,IAAI,EAAE;QACRA,IAAI,CAACE,SAAS,GAAGH,MAAM;MACzB;IACF,CAAC;IACD;IACAI,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC7B,OAAOA,MAAM,CAACE,OAAO,CAAC,CAAC;IACzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ,OAAO;EAAEK,UAAU;EAAEM;AAAW,CAAC,GAAGd,UAAU,CAACe,OAAO;;AAErE;AACA,eAAef,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}